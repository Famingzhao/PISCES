stroma.vip <- stroma.vip[, as.character(matched.stromaID) ]
epi.vip <- epi.vip[, as.character(matched.epiID) ]
## change to hugo gene names
rownames(stroma.vip) <- hugo.names[ rownames(stroma.vip) ]
rownames(epi.vip) <- hugo.names[ rownames(epi.vip) ]
## create the design matrix for the MMR model
stroma.MRmat <- stroma.vip[ intersect(names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100], rownames(stroma.vip)) ,]
rownames(stroma.MRmat) <- paste('S.', rownames(stroma.MRmat), sep = '')
epi.MRmat <- epi.vip[ intersect(names(sort(epi.mrs$es$nes, decreasing = TRUE))[1:100], rownames(epi.vip)) ,]
rownames(epi.MRmat) <- paste('E.', rownames(epi.MRmat), sep = '')
design.mat <- rbind( stroma.MRmat , epi.MRmat )
design.mat <- t(design.mat)
## fit MMR model
dvs <- paste(colnames(design.mat)[1:100], collapse = ' + ')
ivs <- paste(colnames(design.mat)[101:ncol(design.mat)], collapse = ' + ')
model.formula <- as.formula(colnames(design.mat)[1:100] ~ ivs)
mmr.model <- lm(design.mat[, 1:100] ~ design.mat[, 101:ncol(design.mat)])
saveRDS(mmr.model, 'C://Users/lvlah/linux/ac_lab/tumor_geom/lcm_model_fit.rds')
### find single-cell distances using the bulk linear model ###
sc.pda <- readRDS('C://Users/lvlah/linux/ac_lab/data/singleCell/all/pdac-allPatients-geneExp.rds')
sc.metaData <- read.csv('C://Users/lvlah/linux/ac_lab/data/singleCell/all/metadata.csv', header = TRUE, row.names = 1)
View(sc.metaData)
ht150.samps <- rownames(sc.metaData)[which(sc.metaData$ID == 'HT150')]
ht150.samps
table(scsc.metaData$ID)
table(sc.metaData$ID)
ht150.samps <- rownames(sc.metaData)[which(sc.metaData$ID == 'HT143')]
ht143.pda <- sc.pda[, ht143.samps]
ht143.samps <- rownames(sc.metaData)[which(sc.metaData$ID == 'HT143')]
ht143.pda <- sc.pda[, ht143.samps]
dim(ht143.samps)
dim(ht143.pda
)
patient <- 'HT103'
pat.samps <- rownames(sc.metaData)[which(sc.metaData$ID == patient)]
pat.pda <- sc.pda[, pat.samps]
rm(ht143.pda)
dim(pat.pda)
## split the matrix into epithelial and stromal compartments
pat.eCells <- get(load('C://Users/lvlah/linux/ac_lab/data/cancerCellNames/names_cancer_cells_PDA_103.rda'))
ppat.eCells
pat.eCells
### find single-cell distances using the bulk linear model ###
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
QCPlots(pat.pda)
pat.filt <- QCTransform(pat.pda)
pat.cpm <- CPMTransform(pat.filt)
pat.epi <- pat.cpm[, intersect(pat.eCells, colnames(pat.cpm)) ]
dim(pat.epi)
length(pat.eCells)
pat.stroma <- pat.cpm[, setdiff(colnames(pat.cpm), pat.eCells) ]
dim(pat.stroma)
pat.epiRank <- RankTransform(pat.epi)
pat.stromaRank <- RankTransform(pat.stroma)
pat.epiVip <- viper(pat.epiRank, regulon = epi.net.pruned, method = 'none')
pat.stromaVip <- viper(pat.stromaRank, regulon = stroma.net.pruned, method = 'none')
rownames(pat.epiRank)
rownames(stroma.vip)
epi.net.pruned
names(epi.net.pruned)
convert.dict <- readRDS('C://Users/lvlah/linux/ac_lab/data/gene-convert-dict.rds')
View(convert.dict)
length(which(rownames(sc.pda) %in% convert.dict$Entrez.Gene.ID))
rownames(sc.pda)
length(which(rownames(sc.pda) %in% convert.dict$Ensembl.Gene.ID))
length(which(rownames(pat.cpm) %in% convert.dict$Ensembl.Gene.ID))
dim(pat.cpm)
## convert gene names to entrez
pat.cpm <- pat.cpm[ which(rownames(pat.cpm) %in% convert.dict$Ensembl.Gene.ID) ,]
dim(pat.cpm)
match(rownames(pat.cpm), convert.dict$Ensembl.Gene.ID)
rownames(pat.cpm) <- convert.dict$Entrez.Gene.ID[ match(rownames(pat.cpm), convert.dict$Ensembl.Gene.ID) ]
rownames(pat.cpm)
pat.cpm <- pat.cpm[ which(rownames(pat.cpm) %in% convert.dict$Ensembl.Gene.ID) ,]
rownames(pat.cpm) <- convert.dict$Entrez.Gene.ID[ match(rownames(pat.cpm), convert.dict$Ensembl.Gene.ID) ]
## split the matrix into epithelial and stromal compartments
pat.eCells <- get(load('C://Users/lvlah/linux/ac_lab/data/cancerCellNames/names_cancer_cells_PDA_103.rda'))
pat.epi <- pat.cpm[, intersect(pat.eCells, colnames(pat.cpm)) ]
pat.stroma <- pat.cpm[, setdiff(colnames(pat.cpm), pat.eCells) ]
pat.epiRank <- RankTransform(pat.epi)
pat.stromaRank <- RankTransform(pat.stroma)
## viper inference using bulk networks
pat.epiVip <- viper(pat.epiRank, regulon = epi.net.pruned, method = 'none')
pat.stromaVip <- viper(pat.stromaRank, regulon = stroma.net.pruned, method = 'none')
pat.cpm <- CPMTransform(pat.filt)
## convert gene names to entrez
pat.cpm <- pat.cpm[ which(rownames(pat.cpm) %in% convert.dict$Ensembl.Gene.ID) ,]
rownames(pat.cpm) <- convert.dict$Entrez.Gene.ID[ match(rownames(pat.cpm), convert.dict$Ensembl.Gene.ID) ]
## split the matrix into epithelial and stromal compartments
pat.eCells <- get(load('C://Users/lvlah/linux/ac_lab/data/cancerCellNames/names_cancer_cells_PDA_103.rda'))
pat.epi <- pat.cpm[, intersect(pat.eCells, colnames(pat.cpm)) ]
pat.stroma <- pat.cpm[, setdiff(colnames(pat.cpm), pat.eCells) ]
pat.epiRank <- RankTransform(pat.epi)
pat.stromaRank <- RankTransform(pat.stroma)
## viper inference using bulk networks
pat.epiVip <- viper(pat.epiRank, regulon = epi.net.pruned, method = 'none')
pat.stromaVip <- viper(pat.stromaRank, regulon = stroma.net.pruned, method = 'none')
## subset scVip matrices to MRs from LCM
pat.epiMR <- pat.epiVip[ rownames(stroma.MRmat) ,]
rownames(pat.stromaVip) <- hugo.names[ rownames(pat.stromaVip) ]
rownames(pat.epiVip) <- hugo.names[ rownames(pat.epiVip) ]
## subset scVip matrices to MRs from LCM
pat.epiMR <- pat.epiVip[ rownames(stroma.MRmat) ,]
dim(pat.epiVip)
intersect(rownames(stroma.MRmat), rownames(pat.epiVip))
rownames(stroma.MRmat)
rownames(pat.stromaVip) <- paste('S', rownames(pat.stromaVip), sep = '.')
rownames(pat.epiVip) <- paste('E', rownames(pat.epiVip), sep = '.')
rownames(pat.stromaVip)
intersect(rownames(stroma.MRmat), rownames(pat.epiVip))
intersect(rownames(stroma.MRmat), rownames(pat.stromaVip))
pat.stromaMR <- pat.stromaVip[ rownames(stroma.MRmat) ,]
pat.epiMR <- pat.epiVip[ rownames(epi.MRmat) ,]
## predict using the LCM MMR model
predict.stroma <- predict(mmr.model, t(pat.epiMR))
## predict using the LCM MMR model
predict.stroma <- predict(mmr.model, as.data.frame(t(pat.epiMR)) )
mmr.model
as.data.frame(t(pat.epiMR))
dim(as.data.frame(t(pat.epiMR)))
mmrmmr.model
mmr.model
dim(mmr.model$coefficients)
?predict
## predict using the LCM MMR model
predict.stroma <- predict(mmr.model, newdata = as.data.frame(t(pat.epiMR)) )
## predict using the LCM MMR model
predict.stroma <- predict.lm(mmr.model, newdata = as.data.frame(t(pat.epiMR)) )
?fitted
fitted(mmr.model)
View(mmr.model$coefficients)
cbind( as.matrix(rep(1, ncol(pat.epiMR))) , t(pat.epiMR) )
View(cbind( as.matrix(rep(1, ncol(pat.epiMR))) , t(pat.epiMR) ))
## predict using the LCM MMR model
predict.stroma <- cbind( as.matrix(rep(1, ncol(pat.epiMR))) , t(pat.epiMR) ) %*% as.matrix( mmr.model$coefficients )
dim(predict.stroma)
rownames(predict.stroma) <- colnames( pat.epiMR )
colnames(predict.stroma) <- rownames( mmr.model$coefficients )
View(predict.stroma)
colnames(predict.stroma) <- colnames( mmr.model$coefficients )
View(predict.stroma)
## infer pairwise distances
infer.distMat <- matrix(0L, nrow = ncol(pat.cpm), ncol = ncol(pat.cpm))
rownames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR)); colnames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR))
View(infer.distMat)
dim(pat.stromaMR)
i <- 1
j <- 1
pair.dist <- dist( rbind( predict.stroma[i,] , pat.stromaMR[,j] ) )
papair.dist
pair.dist
pair.dist1]
pair.dist[1]
infer.distMat <- matrix(0L, nrow = ncol(pat.cpm), ncol = ncol(pat.cpm))
rownames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR)); colnames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR))
for (i in 1:nrow(predict.stroma) ) {
e.Name <- rownames(predict.stroma)[i]
for (j in 1:ncol(pat.stromaMR) ) {
s.Name <- colnames(pat.stromaMR)[j]
pair.dist <- dist( rbind( predict.stroma[i,] , pat.stromaMR[,j] ) )[1]
infer.distMat[e.Name, s.Name] <- pair.dist
infer.distMat[s.Name, e.Name] <- pair.dist
}
}
dim(infer.distMat)
diag(infer.distMat)
sum(diag(infer.distMat))
dim(predict.stroma)
infer.distMat[60,59]
infer.distMat[60,60]
infer.distMat[60,61]
infer.distMat[60,60]
infer.distMat[61,60]
infer.distMat[59,60]
infer.distMat[61,62]
install.packages('ape')
library(ape)
complete.distMat <- as.dist( additive(infer.distMat) )
View(complete.distMat)
?as.dist
partial.distMat <- as.dist(infer.distMat)
partial.distMat[partial.distMat == 0] <- NA
partial.distMat
head(partial.distMat)
complete.distMat <- as.dist( additive(partial.distMat) )
## MDS to find 3D coordinates
library(MASS)
library(ggplot2)
mds.fit <- isoMDS(complete.distMat, k = 3)
View(as.data.frame(complete.distMat))
View(as.matrix(complete.distMat))
complete.distMat <- as.dist( ultrametric(partial.distMat) )
mds.fit <- isoMDS(complete.distMat, k = 3)
install.packages("scatterplot3d")
library("scatterplot3d")
mds.fit$points
scatterplot3d(mds.fit$points)
dev.off()
scatterplot3d(mds.fit$points)
compartment <- c(rep('epithelial', 60), rep('stromal', nrow(infer.distMat) - 60))
compartment
colors <- c('red', 'blue')[as.numeric(compartment)]
scatterplot3d(mds.fit$points, colors = colors, box = FALSE)
colors <- c(rep('red', 60), rep('blue', nrow(infer.distMat) - 60))
scatterplot3d(mds.fit$points, colors = colors, box = FALSE)
scatterplot3d(mds.fit$points, color = colors, box = FALSE)
plot.mat <- mds.fit$points
rownames(plot.mat) <- rownames(infer.distMat); colnames(plot.mat) <- c('MDS1', 'MDS2', 'MDS3')
compartment <- c(rep('epithelial', 60), rep('stromal', nrow(infer.distMat) - 60))
colors <- c(rep('red', 60), rep('blue', nrow(infer.distMat) - 60))
scatterplot3d(plot.mat, color = colors, box = FALSE)
scatterplot3d(plot.mat, color = colors, box = FALSE, pch = 16)
scatterplot3d(plot.mat * c(-1, -1, 1), color = colors, box = FALSE, pch = 16)
### MWKMeans analysis
library(pca3d)
library(cluster)
library(viper)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
source('C://Users/lvlah/linux/ac_lab/code/algs/multiwayKMeans.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
r1.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds')
r1.vipSim <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-vipSim.rds')
#r1.vipSim <- viperSimilarity(r1.pAct)
r1.PCA <- prcomp(t(r1.pAct))
#pca3d(r1.PCA)
r1.clust <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-clusts.rds')
#r1.clustSil <- SilScoreEval(r1.clust, r1.vipSim)
pca3d(r1.PCA, col = r1.clust$k2$clustering)
col.vect <- r1.clust$k2$clustering
mid.cells <- colnames(phiVals)[intersect(which(phiVals[1,] < 0.85), which(phiVals[1,] > 0.15))]
col.vect[mid.cells] <- 0
col.vect[which(col.vect == 0)] <- 'purple'
col.vect[which(col.vect == 1)] <- 'blue'
col.vect[which(col.vect == 2)] <- 'red'
pca3d(r1.PCA, col = col.vect)
c1.center <- rowMeans(r1.pAct[, which(r1.clust$k3$clustering == 1)])
c2.center <- rowMeans(r1.pAct[, which(r1.clust$k3$clustering == 3)])
k2.centers <- cbind(c1.center, c2.center)
r1.mwk2 <- Cluster(r1.pAct, k2.centers)
phiVals <- r1.mwk2[[1]]
plot.dat <- data.frame('PC1' = r1.PCA$x[,1], 'PC2' = r1.PCA$x[,2])
plot.dat[['k2']] <- as.factor(r1.clust$k2$clustering)
plot.dat[['k3']] <- as.factor(r1.clust$k3$clustering)
ggplot(plot.dat, aes(x=PC1, y=PC2, color=k2)) + geom_point() +
ggtitle('R1 pAct PCA')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=k3)) + geom_point() +
ggtitle('R1 pAct PCA')
plot.dat[['phi']] <- phiVals[1,]
plot.dat[['Sox2']] <- r1.pAct['Sox2',]
plot.dat[['Sox9']] <- r1.pAct['Sox9',]
ggplot(plot.dat, aes(x=PC1, y=PC2, color=phi)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=Sox2)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=Sox9)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
markers <- c('Cldn10', 'Cdkn1c', 'Sox2', 'Bmp4', 'Sox9',
'Foxp2', 'Etv5', 'Irx1', 'S100a6', 'Ctnnd2',
'Epha4')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering),
'sil' = r1.clust$k2$silinfo$widths[,3])
pheatmap(r1.pAct[markers,names(sort(r1.clust$k2$clustering, decreasing = TRUE))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'PISCES R1 Clustering (k=2)')
# mr correlation
pAct.phiCorr <- apply(r1.pAct, 1, function(x) { cor(x, y = phiVals[1,colnames(r1.pAct)], method = 'spearman') })
saveRDS(r1.mwk2, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-mwkm2.rds')
saveRDS(pAct.phiCorr, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-phiCorr.rds')
pAct.phiCorr <- pAct.phiCorr[ names(sort(abs(pAct.phiCorr), decreasing = TRUE)) ]
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('corr' = abs(pAct.phiCorr[1:50]))
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
### LASSO regression against phi values ###
library(glmnet)
x <- t(r1.pAct)
y <- as.double(as.matrix(phiVals[1,]))
cv.lasso <- cv.glmnet(x, y, type.measure = 'auc', standardize = TRUE)
plot(cv.lasso)
plot(cv.lasso$glmnet.fit, xvar="lambda", label=TRUE)
cv.lasso$lambda.min
cv.lasso$lambda.1se
coef(cv.lasso, s=cv.lasso$lambda.min)
fit.coefs <- coef(cv.lasso, s=cv.lasso$lambda.min)
fit.coefs <- as.matrix(fit.coefs)[, 1]
fit.coefs <- fit.coefs[-1]
fit.coefs <- fit.coefs[ names(sort(abs(fit.coefs), decreasing = TRUE)) ]
numMR <- 50
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('coeff' = abs(fit.coefs[1:numMR]))
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung//car-lung_cpm.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_rank.rds')
rownames(rank.mat)
## SECOND VIPER RUN AND CLUSTERING ###
c1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/filtered_feature_bc_matrix/car-lung_c1-r2-net_pruned.rds')
c2.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/filtered_feature_bc_matrix/car-lung_c2-r2-net_pruned.rds')
## SECOND VIPER RUN AND CLUSTERING ###
c1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_c1-r2-net_pruned.rds')
c2.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_c2-r2-net_pruned.rds')
## regulon visualization
nets <- c(c1.net, c2.net)
vip.mat <- r2.pAct
r1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_pruned.rds')
## regulon visualization
net <- r1.net
r1.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds')
vip.mat <- r1.pAct
gene.sig <- rank.mat
rownames(r1.pAct)[1]
dim(r1.pAct)
rownames(r1.pAct)
net$`Aatf''
''
'
net$'Aatf'
regulon <- net$get(feature)
protein <- 'Aatf'
regulon <- net$protein
regulon
regulon <- net$get(protein)
regulon <- net[[protein]]
regulon
edges <- names(regulon$tfmode)
edges
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('tf.mode' = regulon$tfmode, 'likelihood' = regulon$likelihood)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
row.df <- data.frame('tf.mode' = regulon$tfmode[order(regulon$tfmode)], 'likelihood' = regulon$likelihood[order(regulon$tfmode)])
edges <- sort(edges)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
regulon <- net[[protein]]
tfm <- regulon$tfmode
like <- regulon$likelihood[order(tfm)]
tfm <- sort(tfm)
edges <- names(tfm)
regulon <- net[[protein]]
tfm <- regulon$tfmode
like <- regulon$likelihood[order(tfm)]
tfm <- sort(tfm)
edges <- names(tfm)
row.df <- data.frame('tf.mode' = tfm, 'likelihood' = like)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
tfm
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
row.df
pheat.mat <- gene.sig[intersect(edges, rownames(gene.sig)), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(cpm.mat[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(cpm.mat[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
#pca3d(r1.PCA)
r1.clust <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-clusts.rds')
annot.df <- data.frame('clust' = as.factor(r1.clust$k3$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
mt.genes <- readRDS('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mitochndrlGenesSymbEnsembl.rds')
View(mt.genes)
write.csv(mt.genes, file = 'C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-geneList.csv', sep = ',', header = TRUE, row.names = FALSE, quote = FALSE)
write.csv(mt.genes, file = 'C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-geneList.csv', sep = ',', row.names = FALSE, quote = FALSE)
version
read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-geneList.csv')
read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-geneList.csv', sep = ',', header = TRUE)
?hist
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
r1.pAct <- readRDS('tutorial/pbmc_r1-pAct.rds')
r2.pAct <- readRDS('tutorial/pbmc_r2-pAct.rds')
r2.MRs <- readRDS('tutorial/pbmc_r2-MRs.rds')
source('functions/process-utils.R')
source('functions/cluster-functions.R')
source('functions/viper-utils.R')
library(ggplot2)
library(ggpubr)
library(viper)
library(pheatmap)
library(RColorBrewer)
library(MUDAN)
library(umap)
raw.mat <- readRDS('tutorial/pbmc.rds')
QCPlots(raw.mat, 'mt-geneList.csv')
('functions/process-utils.R')
QCPlots(raw.mat, 'mt-geneList.csv')
source('functions/process-utils.R')
source('functions/process-utils.R')
source('functions/cluster-functions.R')
source('functions/viper-utils.R')
library(ggplot2)
library(ggpubr)
library(viper)
library(pheatmap)
library(RColorBrewer)
library(MUDAN)
library(umap)
raw.mat <- readRDS('tutorial/pbmc.rds')
QCPlots(raw.mat, 'mt-geneList.csv')
QCPlots(raw.mat, 'mt-geneList.csv')
ensg.mat <- read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-geneList.csv', sep = ',', header = TRUE)
ensg.mat <- ensg.mat$ENSG
ensg.mat
MTMTPercent(raw.mat, ensg.mat)
MTPercent(raw.mat, ensg.mat)
library(rmarkdown)
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
?render
render('PISCES_walkthrough.html', output_format = 'html_document')
render('PISCES_walkthrough.rmd', output_format = 'html_document')
render('PISCES_walkthrough.Rmd', output_format = 'html_document')
render('PISCES_walkthrough.Rmd', output_format = 'html_document')
dim(mt.mat)
dim(raw.mat)
dim(r2.pAct)
r2.MRs
ClusterHeatmap(r2.pAct[ MR_UnWrap(r2.MRs, top = 10) , ], clust = r2.louvain, plotTitle = 'Louvain Clustering Master Regulators')
MR_UnWrap(r2.MRs, top = 10)
head(rownames(r2.pAct))
length(which( MR_UnWrap(r2.MRs, top = 10) %in% rownames(r2.pAct)))
setdiff(rownames(raw.mat), rownames(mt.mat))
setdiff(rownames(mt.mat), rownames(raw.mat))
source('functions/process-utils.R')
mt.test.mat <- MTFilter(raw.mat, 'mt-geneList.csv')
dim(mt.test.mat)
dim(raw.mat)
mt.table <- read.table('mt-geneList.csv', sep = ',', header = TRUE, stringsAsFactors = FALSE)
mt.ensg <- mt.table$ENSG
mt.perc <- MTPercent(raw.mat, mt.ensg)
mt.perc
hist(mt.perc)
QCPlots(raw.mat, 'mt-geneList.csv')
QCPlots(raw.mat, 'mt-geneList.csv')
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
r1.pAct <- readRDS('tutorial/pbmc_r1-pAct.rds')
r2.pAct <- readRDS('tutorial/pbmc_r2-pAct.rds')
r2.MRs <- readRDS('tutorial/pbmc_r2-MRs.rds')
r2.pAct <- Ensemble2GeneName(r2.pAct)
r2.MRs <- BTTestMRs(r2.pAct, r2.louvain)
ClusterHeatmap(r2.pAct[ MR_UnWrap(r2.MRs, top = 10) , ], clust = r2.louvain, plotTitle = 'Louvain Clustering Master Regulators')
MR_UnWrap(r2.MRs, top = 10) %in% rownames(r2.pAct)
length(which(MR_UnWrap(r2.MRs, top = 10) %in% rownames(r2.pAct)))
length(MR_UnWrap(r2.MRs, top = 10))
MR_UnWrap(r2.MRs, top = 10)
dim(r2.pAct)
dim(r2.pAct[ MR_UnWrap(r2.MRs, top = 10) ,])
source('functions/process-utils.R')
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
r1.pAct <- readRDS('tutorial/pbmc_r1-pAct.rds')
r2.pAct <- readRDS('tutorial/pbmc_r2-pAct.rds')
r2.MRs <- readRDS('tutorial/pbmc_r2-MRs.rds')
r2.pAct <- Ensemble2GeneName(r2.pAct)
r2.MRs <- BTTestMRs(r2.pAct, r2.louvain)
ClusterHeatmap(r2.pAct[ MR_UnWrap(r2.MRs, top = 10) , ], clust = r2.louvain, plotTitle = 'Louvain Clustering Master Regulators')
render('PISCES_walkthrough.Rmd', output_format = 'html_document')
