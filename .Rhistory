View(predict.stroma)
colnames(predict.stroma) <- colnames( mmr.model$coefficients )
View(predict.stroma)
## infer pairwise distances
infer.distMat <- matrix(0L, nrow = ncol(pat.cpm), ncol = ncol(pat.cpm))
rownames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR)); colnames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR))
View(infer.distMat)
dim(pat.stromaMR)
i <- 1
j <- 1
pair.dist <- dist( rbind( predict.stroma[i,] , pat.stromaMR[,j] ) )
papair.dist
pair.dist
pair.dist1]
pair.dist[1]
infer.distMat <- matrix(0L, nrow = ncol(pat.cpm), ncol = ncol(pat.cpm))
rownames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR)); colnames(infer.distMat) <- c(colnames(pat.epiMR), colnames(pat.stromaMR))
for (i in 1:nrow(predict.stroma) ) {
e.Name <- rownames(predict.stroma)[i]
for (j in 1:ncol(pat.stromaMR) ) {
s.Name <- colnames(pat.stromaMR)[j]
pair.dist <- dist( rbind( predict.stroma[i,] , pat.stromaMR[,j] ) )[1]
infer.distMat[e.Name, s.Name] <- pair.dist
infer.distMat[s.Name, e.Name] <- pair.dist
}
}
dim(infer.distMat)
diag(infer.distMat)
sum(diag(infer.distMat))
dim(predict.stroma)
infer.distMat[60,59]
infer.distMat[60,60]
infer.distMat[60,61]
infer.distMat[60,60]
infer.distMat[61,60]
infer.distMat[59,60]
infer.distMat[61,62]
install.packages('ape')
library(ape)
complete.distMat <- as.dist( additive(infer.distMat) )
View(complete.distMat)
?as.dist
partial.distMat <- as.dist(infer.distMat)
partial.distMat[partial.distMat == 0] <- NA
partial.distMat
head(partial.distMat)
complete.distMat <- as.dist( additive(partial.distMat) )
## MDS to find 3D coordinates
library(MASS)
library(ggplot2)
mds.fit <- isoMDS(complete.distMat, k = 3)
View(as.data.frame(complete.distMat))
View(as.matrix(complete.distMat))
complete.distMat <- as.dist( ultrametric(partial.distMat) )
mds.fit <- isoMDS(complete.distMat, k = 3)
install.packages("scatterplot3d")
library("scatterplot3d")
mds.fit$points
scatterplot3d(mds.fit$points)
dev.off()
scatterplot3d(mds.fit$points)
compartment <- c(rep('epithelial', 60), rep('stromal', nrow(infer.distMat) - 60))
compartment
colors <- c('red', 'blue')[as.numeric(compartment)]
scatterplot3d(mds.fit$points, colors = colors, box = FALSE)
colors <- c(rep('red', 60), rep('blue', nrow(infer.distMat) - 60))
scatterplot3d(mds.fit$points, colors = colors, box = FALSE)
scatterplot3d(mds.fit$points, color = colors, box = FALSE)
plot.mat <- mds.fit$points
rownames(plot.mat) <- rownames(infer.distMat); colnames(plot.mat) <- c('MDS1', 'MDS2', 'MDS3')
compartment <- c(rep('epithelial', 60), rep('stromal', nrow(infer.distMat) - 60))
colors <- c(rep('red', 60), rep('blue', nrow(infer.distMat) - 60))
scatterplot3d(plot.mat, color = colors, box = FALSE)
scatterplot3d(plot.mat, color = colors, box = FALSE, pch = 16)
scatterplot3d(plot.mat * c(-1, -1, 1), color = colors, box = FALSE, pch = 16)
install.packages('glmnet')
r1.mwk2 <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-mwkm2.rds')
pAct.phiCorr <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-phiCorr.rds')
r1.pAct <- readRDS("C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds")
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('corr' = abs(pAct.phiCorr[1:50]))
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 4,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
library(pheatmap)
phiVals <- r1.mwk2[[1]]
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('corr' = abs(pAct.phiCorr[1:50]))
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 4,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
r1.mwk2 <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-mwkm2.rds')
r1.pAct <- readRDS("C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds")
r1.clust <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-clusts_2.rds')
library(pca3d)
library(cluster)
library(viper)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
source('C://Users/lvlah/linux/ac_lab/code/algs/multiwayKMeans.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/lvScripts/cluster-functions.R')
r1.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds')
r1.vipSim <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-vipSim.rds')
#r1.vipSim <- viperSimilarity(r1.pAct)
r1.PCA <- prcomp(t(r1.pAct))
#pca3d(r1.PCA)
r1.clust <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-clusts.rds')
#r1.clustSil <- SilScoreEval(r1.clust, r1.vipSim)
pca3d(r1.PCA, col = r1.clust$k2$clustering)
col.vect <- r1.clust$k2$clustering
mid.cells <- colnames(phiVals)[intersect(which(phiVals[1,] < 0.85), which(phiVals[1,] > 0.15))]
col.vect[mid.cells] <- 0
col.vect[which(col.vect == 0)] <- 'purple'
col.vect[which(col.vect == 1)] <- 'blue'
col.vect[which(col.vect == 2)] <- 'red'
pca3d(r1.PCA, col = col.vect)
c1.center <- rowMeans(r1.pAct[, which(r1.clust$k3$clustering == 1)])
c2.center <- rowMeans(r1.pAct[, which(r1.clust$k3$clustering == 3)])
k2.centers <- cbind(c1.center, c2.center)
r1.mwk2 <- Cluster(r1.pAct, k2.centers)
phiVals <- r1.mwk2[[1]]
plot.dat <- data.frame('PC1' = r1.PCA$x[,1], 'PC2' = r1.PCA$x[,2])
plot.dat[['k2']] <- as.factor(r1.clust$k2$clustering)
plot.dat[['k3']] <- as.factor(r1.clust$k3$clustering)
ggplot(plot.dat, aes(x=PC1, y=PC2, color=k2)) + geom_point() +
ggtitle('R1 pAct PCA')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=k3)) + geom_point() +
ggtitle('R1 pAct PCA')
plot.dat[['phi']] <- phiVals[1,]
plot.dat[['Sox2']] <- r1.pAct['Sox2',]
plot.dat[['Sox9']] <- r1.pAct['Sox9',]
ggplot(plot.dat, aes(x=PC1, y=PC2, color=phi)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=Sox2)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
ggplot(plot.dat, aes(x=PC1, y=PC2, color=Sox9)) + geom_point() +
ggtitle('R1 pAct PCA') + scale_colour_gradient(low = 'blue', high = 'red')
markers <- c('Cldn10', 'Cdkn1c', 'Sox2', 'Bmp4', 'Sox9',
'Foxp2', 'Etv5', 'Irx1', 'S100a6', 'Ctnnd2',
'Epha4')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering),
'sil' = r1.clust$k2$silinfo$widths[,3])
pheatmap(r1.pAct[markers,names(sort(r1.clust$k2$clustering, decreasing = TRUE))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'PISCES R1 Clustering (k=2)')
# mr correlation
pAct.phiCorr <- apply(r1.pAct, 1, function(x) { cor(x, y = phiVals[1,colnames(r1.pAct)], method = 'spearman') })
saveRDS(r1.mwk2, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-mwkm2.rds')
saveRDS(pAct.phiCorr, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-phiCorr.rds')
pAct.phiCorr <- pAct.phiCorr[ names(sort(abs(pAct.phiCorr), decreasing = TRUE)) ]
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('corr' = abs(pAct.phiCorr[1:50]))
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 4,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
hist(pAct.phiCorr)
?glmnet
?cv.glmnet
### LASSO regression against phi values ###
library(glmnet)
?cv.glmnet
cv.lasso <- cv.glmnet(x, y, family = 'binomial', type.measure = 'auc', standardize = TRUE)
x <- t(r1.pAct)
y <- as.matrix(phiVals)
cv.lasso <- cv.glmnet(x, y, family = 'binomial', type.measure = 'auc', standardize = TRUE)
dim(x)
dim(y)
y <- t(as.matrix(phiVals[1,]))
cv.lasso <- cv.glmnet(x, y, family = 'binomial', type.measure = 'auc', standardize = TRUE)
y
dim(y)
View(y)
y <- as.matrix(phiVals[1,])
x <- t(r1.pAct)
y <- as.matrix(phiVals[1,])
cv.lasso <- cv.glmnet(x, y, family = 'binomial', type.measure = 'auc', standardize = TRUE)
y <- as.double(as.matrix(phiVals[1,]))
cv.lasso <- cv.glmnet(x, y, family = 'binomial', type.measure = 'auc', standardize = TRUE)
cv.lasso <- cv.glmnet(x, y, type.measure = 'auc', standardize = TRUE)
plot(cv.lasso)
plot(cv.lasso$glmnet.fit, xvar="lambda", label=TRUE)
cv.lasso$lambda.min
cv.lasso$lambda.1se
coef(cv.lasso, s=cv.lasso$lambda.min)
?cv.glmnet
?glmnet
?cv.glmnet
coefs <- coef(cv.lasso, s=cv.lasso$lambda.min)
coefs
head(coef)
head(coefs)
fit.coefs <- as.matrix(fit.coefs)[, 1]
fit.coefs <- coef(cv.lasso, s=cv.lasso$lambda.min)
fit.coefs <- as.matrix(fit.coefs)[, 1]
fit.coefs
?sort
fit.coefs <- fit.coefs[ names(sort(abs(fit.coefs), decreasing = TRUE)) ]
numMR <- 50
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('coeff' = abs(fit.coefs[1:numMR]))
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
fit.coefs
fit.coefs <- as.matrix(fit.coefs)[, 1]
fit.coefs <- fit.coefs[-1]
fit.coefs <- fit.coefs[ names(sort(abs(fit.coefs), decreasing = TRUE)) ]
numMR <- 50
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('coeff' = abs(fit.coefs[1:numMR]))
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
## load packages and functions
library(viper)
library(ggplot2)
library(ggpubr)
source('C://Users/lvlah/linux/ac_lab/code/atg_msViperPlot.R')
metadata <- read.table('C://Users/lvlah/linux/ac_lab/data/lcm_pda/PDAC-Interactome-Samples_newOk.txt',
header = TRUE, sep = '\t')
hugo.names <- readRDS("C://Users/lvlah/linux/ac_lab/Hugo.Names.rds")
## load raw data
stroma.gExp <- get(load('C://Users/lvlah/linux/ac_lab/data/lcm_pda/Stroma.rda'))
metadata <- read.table('C://Users/lvlah/linux/ac_lab/data/lcm_pda/PDAC-Interactome-Samples_newOk.txt',
header = TRUE, sep = '\t')
stroma.net <- get(load('C://Users/lvlah/linux/ac_lab/data/lcm_pda/regul_stroma.rda'))
stroma.net.pruned <- pruneRegulon(stroma.net, 50, adaptive = FALSE, eliminate = TRUE)
hugo.names <- readRDS("C://Users/lvlah/linux/ac_lab/Hugo.Names.rds")
## parse into PanIN and PDA
panin <- metadata$SampleID[which(metadata$Type == 'PanIN')]
stroma.pda <- stroma.gExp[, !colnames(stroma.gExp) %in% panin ]
saveRDS(stroma.pda, file = 'C://Users/lvlah/linux/ac_lab/data/lcm_pda/stroma-pda.rds')
stroma.pan <- stroma.gExp[, intersect(colnames(stroma.gExp), panin) ]
saveRDS(stroma.pan, file = 'C://Users/lvlah/linux/ac_lab/data/lcm_pda/stroma-panIN.rds')
## load epithelial data and secreted genes
epi.gExp <- get(load('C://Users/lvlah/linux/ac_lab/data/lcm_pda/Epithelium.rda'))
rownames(epi.gExp) <- hugo.names[ rownames(epi.gExp) ]
secreted.genes <- read.table('C://Users/lvlah/linux/ac_lab/data/pda_olive/secreted_ensg_gn_5-24.txt', sep = '\t', header = TRUE)
## correlation
stroma.patients <- metadata$PatientID[ match(colnames(stroma.pda), metadata$SampleID) ]
epi.patients <- metadata$PatientID[ match(colnames(epi.gExp), metadata$SampleID) ]
shared.patients <- intersect(stroma.patients, epi.patients)
stroma.meta <- metadata[ which(metadata$Compartment == 'Stroma') ,]
matched.stromaID <- stroma.meta$SampleID[ match(shared.patients, stroma.meta$PatientID) ]
epi.meta <- metadata[ which(metadata$Compartment == 'Epithelium') ,]
matched.epiID <- epi.meta$SampleID[ match(shared.patients, epi.meta$PatientID) ]
length(matched.stromaID)
length(matched.epiID)
stroma.vip <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma_vip.rds')
rownames(stroma.vip) <- hugo.names[ rownames(stroma.vip) ]
stroma.topVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100] ,]
stroma.botVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = FALSE))[1:100] ,]
epi.patSecGExp <- epi.gExp[ intersect(secreted.genes$Gene.name, rownames(epi.gExp)) , as.character(matched.epiID) ]
stroma.mrs <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma-mrs_vPanIN.rds')
## load epithelial data and secreted genes
epi.gExp <- get(load('C://Users/lvlah/linux/ac_lab/data/lcm_pda/Epithelium.rda'))
rownames(epi.gExp) <- hugo.names[ rownames(epi.gExp) ]
secreted.genes <- read.table('C://Users/lvlah/linux/ac_lab/data/pda_olive/secreted_ensg_gn_5-24.txt', sep = '\t', header = TRUE)
## correlation
stroma.patients <- metadata$PatientID[ match(colnames(stroma.pda), metadata$SampleID) ]
epi.patients <- metadata$PatientID[ match(colnames(epi.gExp), metadata$SampleID) ]
shared.patients <- intersect(stroma.patients, epi.patients)
stroma.meta <- metadata[ which(metadata$Compartment == 'Stroma') ,]
matched.stromaID <- stroma.meta$SampleID[ match(shared.patients, stroma.meta$PatientID) ]
epi.meta <- metadata[ which(metadata$Compartment == 'Epithelium') ,]
matched.epiID <- epi.meta$SampleID[ match(shared.patients, epi.meta$PatientID) ]
length(matched.stromaID)
length(matched.epiID)
stroma.vip <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma_vip.rds')
rownames(stroma.vip) <- hugo.names[ rownames(stroma.vip) ]
stroma.topVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100] ,]
stroma.botVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = FALSE))[1:100] ,]
epi.patSecGExp <- epi.gExp[ intersect(secreted.genes$Gene.name, rownames(epi.gExp)) , as.character(matched.epiID) ]
stroma.vip <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma_vip.rds')
rownames(stroma.vip) <- hugo.names[ rownames(stroma.vip) ]
stroma.topVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100] ,]
stroma.mrs
names(stroma.mrs$es$nes)
## parse into PanIN and PDA
panin <- metadata$SampleID[which(metadata$Type == 'PanIN')]
stroma.pda <- stroma.gExp[, !colnames(stroma.gExp) %in% panin ]
saveRDS(stroma.pda, file = 'C://Users/lvlah/linux/ac_lab/data/lcm_pda/stroma-pda.rds')
stroma.pan <- stroma.gExp[, intersect(colnames(stroma.gExp), panin) ]
saveRDS(stroma.pan, file = 'C://Users/lvlah/linux/ac_lab/data/lcm_pda/stroma-panIN.rds')
## msVIPER analysis
stroma.sig <- bootstrapTtest(x = stroma.pda, y = stroma.pan, per = 100)
stroma.null <- ttestNull(x = stroma.pda, y = stroma.pan, per = 1000)
stroma.mrs <- msviper(ges = stroma.sig, regulon = stroma.net.pruned, nullmodel = stroma.null)
stroma.mrs <- bootstrapmsviper(stroma.mrs, method = 'mean')
stroma.mrs <- msviperAnnot(stroma.mrs, hugo.names)
saveRDS(stroma.mrs, file = 'C://Users/lvlah/linux/ac_lab/data/lcm_pda/pda_stroma_mrs.rds')
stroma.mrs <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma-mrs_vPanIN.rds')
stroma.mrs
stroma.mrs <- msviperAnnot(stroma.mrs, hugo.names)
rownames(stroma.vip) <- hugo.names[ rownames(stroma.vip) ]
stroma.topVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100] ,]
stroma.botVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = FALSE))[1:100] ,]
epi.patSecGExp <- epi.gExp[ intersect(secreted.genes$Gene.name, rownames(epi.gExp)) , as.character(matched.epiID) ]
names(sort(stroma.mrs$es$nes, decreasing = TRUE))
rownames(stroma.vip)
stroma.vip <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/stroma_vip.rds')
rownames(stroma.vip)
stroma.topVip <- stroma.vip[ names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100] ,]
View(stroma.vip)
stroma.topVip <- stroma.vip[ intersect(names(sort(stroma.mrs$es$nes, decreasing = TRUE))[1:100], rownames(stroma.vip)) ,]
stroma.botVip <- stroma.vip[ intersect(names(sort(stroma.mrs$es$nes, decreasing = FALSE))[1:100], rownames(stroma.vip)) ,]
dim(stroma.topVip)
dim(stroma.botVip)
## build epithelial viperSignatue
epi.panIN <- stroma.gExp[, intersect(colnames(epi.gExp), panin) ]
## build epithelial viperSignatue
epi.panIN <- epi.gExp[, intersect(colnames(epi.gExp), panin) ]
epi.vipSig <- viperSignature(epi.gExp[, as.character(matched.epiID)], ref = epi.panIN)
epi.vipSigSec <- epi.vipSig[ intersect(secreted.genes$Gene.name, rownames(epi.gExp)) ,  as.character(matched.epiID) ]
dim(epi.vipSig)
epi.gExp[, as.character(matched.epiID)]
epi.vipSig <- viperSignature(epi.gExp[, as.character(matched.epiID)], ref = epi.panIN)
dim(epi.vipSig)
epi.vipSig
epi.vipSigSec <- epi.vipSig$signature[ intersect(secreted.genes$Gene.name, rownames(epi.gExp)) ,  as.character(matched.epiID) ]
## generate correlation matrices
CorrMatBuild <- function(mat1, mat2) {
# build blank matrix
N <- nrow(mat1); M <- nrow(mat2)
corrMat <- matrix(0L, nrow = N, ncol = M)
rownames(corrMat) <- rownames(mat1); colnames(corrMat) <- rownames(mat2)
# populate with correlations
for (i in 1:N) { # for each row of mat1
for (j in 1:M) { # for each row of mat2
corrMat[i,j] <- cor(x =mat1[i,], y = mat2[j,], method = 'spearman')
}
}
# return the matrix
return(corrMat)
}
saveRDS(topMR.corrMat, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_corrMat_spearman.rds')
saveRDS(botMR.corrMat, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_corrMat_spearman.rds')
## generate histograms of correlations, save any pairs above threshold as csv
topMR.cors <- melt(topMR.corrMat); colnames(topMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
botMR.cors <- melt(botMR.corrMat); colnames(botMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
top.plot <- ggplot(topMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Top Stromal MRs', Correlation = 'Spearman Correlation')
bot.plot <- ggplot(botMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Bottom Stromal MRs', Correlation = 'Spearman Correlation')
ggarrange(top.plot, bot.plot, nrow = 2, ncol = 1)
cor.thresh <- 0.45
write.table(topMR.cors[ which(abs(topMR.cors$Correlation) > 0.45) , ], file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_topCors.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(botMR.cors[ which(abs(botMR.cors$Correlation) > 0.45) , ], file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_topCors.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
topMR.corrMat <- CorrMatBuild(epi.vipSigSec, stroma.topVip)
botMR.corrMat <- CorrMatBuild(epi.vipSigSec, stroma.botVip)
saveRDS(topMR.corrMat, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_corrMat_spearman.rds')
saveRDS(botMR.corrMat, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_corrMat_spearman.rds')
??melt
library(gggplot2)
topMR.cors <- melt(topMR.corrMat); colnames(topMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
botMR.cors <- melt(botMR.corrMat); colnames(botMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
top.plot <- ggplot(topMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Top Stromal MRs', Correlation = 'Spearman Correlation')
bot.plot <- ggplot(botMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Bottom Stromal MRs', Correlation = 'Spearman Correlation')
ggarrange(top.plot, bot.plot, nrow = 2, ncol = 1)
library(ggplot2)
topMR.cors <- melt(topMR.corrMat); colnames(topMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
botMR.cors <- melt(botMR.corrMat); colnames(botMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
top.plot <- ggplot(topMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Top Stromal MRs', Correlation = 'Spearman Correlation')
bot.plot <- ggplot(botMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Bottom Stromal MRs', Correlation = 'Spearman Correlation')
ggarrange(top.plot, bot.plot, nrow = 2, ncol = 1)
## generate histograms of correlations, save any pairs above threshold as csv
library(reshape2)
topMR.cors <- melt(topMR.corrMat); colnames(topMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
botMR.cors <- melt(botMR.corrMat); colnames(botMR.cors) <- c('Epithelial Gene Expression', 'Stroma Master Regulator Activity', 'Correlation')
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(topMR.cors, file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_correlation.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
top.plot <- ggplot(topMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Top Stromal MRs', Correlation = 'Spearman Correlation')
bot.plot <- ggplot(botMR.cors, aes(x = Correlation)) + geom_histogram(binwidth = 0.01) + labs(title = 'Correlation w/ Bottom Stromal MRs', Correlation = 'Spearman Correlation')
ggarrange(top.plot, bot.plot, nrow = 2, ncol = 1)
cor.thresh <- 0.45
write.table(topMR.cors[ which(abs(topMR.cors$Correlation) > 0.45) , ], file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/topMR_topCors.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(botMR.cors[ which(abs(botMR.cors$Correlation) > 0.45) , ], file = 'C://Users/lvlah/linux/ac_lab/data/pda_olive/botMR_topCors.csv',
sep = ',', quote = FALSE, row.names = FALSE, col.names = TRUE)
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
pbmc.mat <- readRDS('tutorial/pbmc.rds')
pbmc.mat <- pbmc.mat[1:50, 1:50]
#' Transforms gene names from Ensembl to hgnc.
#'
#' @param dat.mat Matrix of data with ENSEMBL names (genes X samples).
#' @return Data with HGNC names. Some data will likely be lost in the conversion.
Ensemble2Entrez <-function(dat.mat) {
# packages
require(biomaRt)
# get the mart
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
name.map <- getBM(attributes=c('entrezgene','ensembl_gene_id'),
filters = 'ensembl_gene_id', values = (rownames(dat.mat)), mart = ensembl)
rownames(name.map) <- make.unique(name.map$ensembl_gene_id)
# create a converted dataset
convert.dat <- merge(name.map, dat.mat, by = c('row.names'))
rownames(convert.dat) <- make.unique(convert.dat$entrezgene)
convert.dat <- convert.dat[,-c(1:2)]
return(as.matrix(convert.dat))
}
Ensemble2Entrez(pbmc.mat)
dat.mat <- pbmc.mat
# packages
require(biomaRt)
# get the mart
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
name.map <- getBM(attributes=c('entrezgene','ensembl_gene_id'),
filters = 'ensembl_gene_id', values = (rownames(dat.mat)), mart = ensembl)
name.map
rownames(dat.mat)
# remove rows with no match for entrez
name.map <- name.map[ which(!is.na(name.map$entrezgene)) , ]
name.map
convert.dat <- dat.mat[ name.map$ensembl_gene_id , ]
rownames(convert.dat) <- dat.mat[ match(rownames(convert.dat, name.map$ensembl_gene_id)) ,]$entrezgene
convert.dat
dim(convert.dat)
dim(name.map)
rownames(convert.dat) <- dat.mat[ match(rownames(convert.dat), name.map$ensembl_gene_id) ,]$entrezgene
match(rownames(convert.dat), name.map$ensembl_gene_id)
rownames(convert.dat) <- name.map$entrezgene
convert.dat
#' Transforms gene names from Ensembl to hgnc.
#'
#' @param dat.mat Matrix of data with ENSEMBL names (genes X samples).
#' @return Data with HGNC names. Some data will likely be lost in the conversion.
Ensemble2Entrez <-function(dat.mat) {
# packages
require(biomaRt)
# get the mart
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
name.map <- getBM(attributes=c('entrezgene','ensembl_gene_id'),
filters = 'ensembl_gene_id', values = (rownames(dat.mat)), mart = ensembl)
# remove rows with no match for entrez, then match and replace
name.map <- name.map[ which(!is.na(name.map$entrezgene)) , ]
convert.dat <- dat.mat[ name.map$ensembl_gene_id , ]
rownames(convert.dat) <- name.map$entrezgene
return(convert.dat)
}
Ensemble2Entrez(pbmc.mat)
dat.mat <- Ensemble2Entrez(pbmc.mat)
dat.mat
dim(dat.mat)
# get the mart
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
name.map <- getBM(attributes=c('entrezgene','ensembl_gene_id'),
filters = 'entrezgene', values = (rownames(dat.mat)), mart = ensembl)
name.map
# remove rows with no match for entrez, then match and replace
name.map <- name.map[ which(!is.na(name.map$ensembl_gene_id)) , ]
name.map
convert.dat <- dat.mat[ name.map$entrezgene , ]
dat.mat
dim(dat.mat)
dim(name.map)
convert.dat <- dat.mat[ as.character( name.map$entrezgene ) , ]
convert.dat
dim(convert.dat)
rownames(convert.dat) <- name.map$ensembl_gene_id
convert.dat
library(rmarkdown)
render('PISCES_walkthrough.Rmd')
Many single-cell data sets will contain a wide variety of populations that are not equidistant. For instance, it will be much easier to separate epithelial cells and T-Cells then it will be to seperate CD4 and CD8 populations of T-Cells. To handle this challenge, we provide an iterative clustering protocal, that will analyze clusters separate from the rest of the data to look for more granular populations.
render('PISCES_walkthrough.Rmd')
render('PISCES_walkthrough.Rmd')
